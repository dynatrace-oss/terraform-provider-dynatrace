/**
* @license
* Copyright 2020 Dynatrace LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

package thirdpartyvulnerabilitykuberneteslabelrulesettings

import (
	"fmt"
	"slices"

	"github.com/dynatrace-oss/terraform-provider-dynatrace/terraform/hcl"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

type KubernetesLabelConditions []*KubernetesLabelCondition

func (me *KubernetesLabelConditions) Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"kubernetes_label_condition": {
			Type:        schema.TypeList,
			Required:    true,
			MinItems:    1,
			Description: "",
			Elem:        &schema.Resource{Schema: new(KubernetesLabelCondition).Schema()},
		},
	}
}

func (me KubernetesLabelConditions) MarshalHCL(properties hcl.Properties) error {
	return properties.EncodeSlice("kubernetes_label_condition", me)
}

func (me *KubernetesLabelConditions) UnmarshalHCL(decoder hcl.Decoder) error {
	return decoder.DecodeSlice("kubernetes_label_condition", me)
}

// KubernetesLabelCondition. We provide suggestions for Kubernetes label keys and values based on what we currently see in your environment. You can also enter any value that isn't in the list. Key and value matches are case-sensitive.
type KubernetesLabelCondition struct {
	KubernetesLabelKey   string                      `json:"kubernetesLabelKey"`             // Kubernetes label key
	KubernetesLabelValue *string                     `json:"kubernetesLabelValue,omitempty"` // Kubernetes label value
	Matcher              KubernetesLabelValueMatcher `json:"matcher"`                        // Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`
}

func (me *KubernetesLabelCondition) Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"kubernetes_label_key": {
			Type:        schema.TypeString,
			Description: "Kubernetes label key",
			Required:    true,
		},
		"kubernetes_label_value": {
			Type:        schema.TypeString,
			Description: "Kubernetes label value",
			Optional:    true, // nullable & precondition
		},
		"matcher": {
			Type:        schema.TypeString,
			Description: "Possible Values: `CONTAINS`, `DOES_NOT_CONTAIN`, `DOES_NOT_END_WITH`, `DOES_NOT_EXIST`, `DOES_NOT_START_WITH`, `ENDS_WITH`, `EQUALS`, `EXISTS`, `NOT_EQUALS`, `STARTS_WITH`",
			Required:    true,
		},
	}
}

func (me *KubernetesLabelCondition) MarshalHCL(properties hcl.Properties) error {
	return properties.EncodeAll(map[string]any{
		"kubernetes_label_key":   me.KubernetesLabelKey,
		"kubernetes_label_value": me.KubernetesLabelValue,
		"matcher":                me.Matcher,
	})
}

func (me *KubernetesLabelCondition) HandlePreconditions() error {
	if (me.KubernetesLabelValue == nil) && (!slices.Contains([]string{"EXISTS", "DOES_NOT_EXIST"}, string(me.Matcher))) {
		return fmt.Errorf("'kubernetes_label_value' must be specified if 'matcher' is set to '%v'", me.Matcher)
	}
	return nil
}

func (me *KubernetesLabelCondition) UnmarshalHCL(decoder hcl.Decoder) error {
	return decoder.DecodeAll(map[string]any{
		"kubernetes_label_key":   &me.KubernetesLabelKey,
		"kubernetes_label_value": &me.KubernetesLabelValue,
		"matcher":                &me.Matcher,
	})
}
