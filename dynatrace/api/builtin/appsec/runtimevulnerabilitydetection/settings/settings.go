/**
* @license
* Copyright 2020 Dynatrace LLC
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
 */

package runtimevulnerabilitydetection

import (
	"github.com/dynatrace-oss/terraform-provider-dynatrace/terraform/hcl"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

type Settings struct {
	EnableCodeLevelVulnerabilityDetection bool            `json:"enableCodeLevelVulnerabilityDetection"` // Enable Code-level Vulnerability Analytics
	EnableRuntimeVulnerabilityDetection   bool            `json:"enableRuntimeVulnerabilityDetection"`   // Enable Third-party Vulnerability Analytics
	GlobalMonitoringModeDotNet            *MonitoringMode `json:"globalMonitoringModeDotNet,omitempty"`  // (v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain process groups.
	GlobalMonitoringModeJava              MonitoringMode  `json:"globalMonitoringModeJava"`              // Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	GlobalMonitoringModeTPV               MonitoringMode  `json:"globalMonitoringModeTPV"`               // Possible Values: `MONITORING_OFF`, `MONITORING_ON`
	Technologies                          *Technology     `json:"technologies"`                          // Vulnerability Analytics can be enabled/disabled per supported technology.
}

func (me *Settings) Name() string {
	return "vulnerability_settings"
}

func (me *Settings) Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		"enable_code_level_vulnerability_detection": {
			Type:        schema.TypeBool,
			Description: "Enable Code-level Vulnerability Analytics",
			Required:    true,
		},
		"enable_runtime_vulnerability_detection": {
			Type:        schema.TypeBool,
			Description: "Enable Third-party Vulnerability Analytics",
			Required:    true,
		},
		"global_monitoring_mode_dot_net": {
			Type:        schema.TypeString,
			Description: "(v1.290) Global .NET code-level vulnerability detection control defines the default for all process groups. You can use monitoring rules to override the default for certain process groups.",
			Optional:    true, // nullable
		},
		"global_monitoring_mode_java": {
			Type:        schema.TypeString,
			Description: "Possible Values: `MONITORING_OFF`, `MONITORING_ON`",
			Required:    true,
		},
		"global_monitoring_mode_tpv": {
			Type:        schema.TypeString,
			Description: "Possible Values: `MONITORING_OFF`, `MONITORING_ON`",
			Optional:    true,
			DiffSuppressFunc: func(k, oldValue, newValue string, d *schema.ResourceData) bool {
				// global_monitoring_mode_tpv was introduced in v289 as a required field, added code below to have successful results for old/new tenants.
				return newValue == ""
			},
			// Default: "MONITORING_ON",
		},
		"technologies": {
			Type:        schema.TypeList,
			Description: "Vulnerability Analytics can be enabled/disabled per supported technology.",
			Required:    true,
			Elem:        &schema.Resource{Schema: new(Technology).Schema()},
			MinItems:    1,
			MaxItems:    1,
		},
	}
}

func (me *Settings) MarshalHCL(properties hcl.Properties) error {
	return properties.EncodeAll(map[string]any{
		"enable_code_level_vulnerability_detection": me.EnableCodeLevelVulnerabilityDetection,
		"enable_runtime_vulnerability_detection":    me.EnableRuntimeVulnerabilityDetection,
		"global_monitoring_mode_dot_net":            me.GlobalMonitoringModeDotNet,
		"global_monitoring_mode_java":               me.GlobalMonitoringModeJava,
		"global_monitoring_mode_tpv":                me.GlobalMonitoringModeTPV,
		"technologies":                              me.Technologies,
	})
}

func (me *Settings) UnmarshalHCL(decoder hcl.Decoder) error {
	err := decoder.DecodeAll(map[string]any{
		"enable_code_level_vulnerability_detection": &me.EnableCodeLevelVulnerabilityDetection,
		"enable_runtime_vulnerability_detection":    &me.EnableRuntimeVulnerabilityDetection,
		"global_monitoring_mode_dot_net":            &me.GlobalMonitoringModeDotNet,
		"global_monitoring_mode_java":               &me.GlobalMonitoringModeJava,
		"global_monitoring_mode_tpv":                &me.GlobalMonitoringModeTPV,
		"technologies":                              &me.Technologies,
	})
	if me.GlobalMonitoringModeTPV == "" {
		me.GlobalMonitoringModeTPV = "MONITORING_ON"
	}

	return err
}
