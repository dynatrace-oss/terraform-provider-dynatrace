{
	"allowedScopes": [
		"environment"
	],
	"description": "Define blocking or monitoring exception rules for specific attacks.",
	"displayName": "Application Protection: Allowlist",
	"documentation": "",
	"dynatrace": "1",
	"enums": {
		"AgentSideAttributeKey": {
			"description": "",
			"displayName": "Criteria",
			"documentation": "",
			"items": [
				{
					"description": "Type of detection. Example: \"SSRF\".",
					"displayName": "detection.type",
					"value": "DETECTION_TYPE"
				},
				{
					"description": "IP address of the client (IPv4 or IPv6) from which the actor operates. Example: \"192.168.1.2\".",
					"displayName": "actor.ip",
					"value": "ACTOR_IP"
				},
				{
					"description": "URI path of the entry point. Example: \"/user/2/demo\".",
					"displayName": "entry_point.url.path",
					"value": "ENTRY_POINT_URL_PATH"
				},
				{
					"description": "Payload at the vulnerable function. Example: \"https://example.dynatrace.com:8080/resources\".",
					"displayName": "entry_point.payload",
					"value": "ENTRY_POINT_PAYLOAD"
				},
				{
					"description": "URI host of the payload at the vulnerable function (only for SSRF detection type). Example: \"example.dynatrace.com\".",
					"displayName": "entry_point.payload.domain",
					"value": "ENTRY_POINT_PAYLOAD_DOMAIN"
				},
				{
					"description": "URI port of the payload at the vulnerable function (only for SSRF detection type). Example: \"8080\".",
					"displayName": "entry_point.payload.port",
					"value": "ENTRY_POINT_PAYLOAD_PORT"
				}
			],
			"type": "enum"
		},
		"AgentSideAttributeMatcher": {
			"description": "",
			"displayName": "Matcher",
			"documentation": "",
			"items": [
				{
					"description": "The criteria value must contain the specified value.",
					"displayName": "contains",
					"value": "CONTAINS"
				},
				{
					"description": "The criteria value must not contain the specified value.",
					"displayName": "does not contain",
					"value": "DOES_NOT_CONTAIN"
				},
				{
					"description": "The criteria value must start with the specified value.",
					"displayName": "starts with",
					"value": "STARTS_WITH"
				},
				{
					"description": "The criteria value must not start with the specified value.",
					"displayName": "does not start with",
					"value": "DOES_NOT_STARTS_WITH"
				},
				{
					"description": "The criteria value must end with the specified value.",
					"displayName": "ends with",
					"value": "ENDS_WITH"
				},
				{
					"description": "The criteria value must not end with the specified value.",
					"displayName": "does not end with",
					"value": "DOES_NOT_END_WITH"
				},
				{
					"description": "The criteria value must be contained in specified IP CIDR.",
					"displayName": "is part of IP CIDR",
					"value": "IP_CIDR"
				},
				{
					"description": "The criteria value must not be contained in specified IP CIDR.",
					"displayName": "is not part of IP CIDR",
					"value": "NOT_IN_IP_CIDR"
				},
				{
					"description": "The criteria value must be equal to the specified value.",
					"displayName": "equals",
					"value": "EQUALS"
				},
				{
					"description": "The criteria value must not be equal to the specified value.",
					"displayName": "does not equal",
					"value": "NOT_EQUALS"
				}
			],
			"type": "enum"
		},
		"BlockingStrategy": {
			"description": "The attack handling strategy for allowlisted attacks.",
			"displayName": "Attack control",
			"documentation": "",
			"items": [
				{
					"description": "Attacks will be ignored.",
					"displayName": "Off; incoming attacks NOT detected or blocked.",
					"value": "OFF"
				},
				{
					"description": "Attacks will be recorded.",
					"displayName": "Monitor; incoming attacks detected only.",
					"value": "MONITOR"
				}
			],
			"type": "enum"
		},
		"DetectionType": {
			"description": "",
			"displayName": "Detection type",
			"documentation": "",
			"items": [
				{
					"description": "SQL injection detection type",
					"displayName": "SQL injection",
					"value": "SQL_INJECTION"
				},
				{
					"description": "Command injection attack type",
					"displayName": "Command injection",
					"value": "CMD_INJECTION"
				},
				{
					"description": "JNDI injection attack type",
					"displayName": "JNDI injection",
					"value": "JNDI_INJECTION"
				},
				{
					"description": "SSRF attack type",
					"displayName": "SSRF",
					"value": "SSRF"
				}
			],
			"type": "enum"
		},
		"ResourceAttributeValueMatcher": {
			"description": "",
			"displayName": "ResourceAttributeValueMatcher",
			"documentation": "",
			"items": [
				{
					"description": "The resource attribute value must be equal to the specified value.",
					"displayName": "equals",
					"value": "EQUALS"
				},
				{
					"description": "The resource attribute value must not be equal to the specified value.",
					"displayName": "does not equal",
					"value": "NOT_EQUALS"
				},
				{
					"description": "The resource attribute value must contain the specified value.",
					"displayName": "contains",
					"value": "CONTAINS"
				},
				{
					"description": "The resource attribute value must not contain the specified value.",
					"displayName": "does not contain",
					"value": "DOES_NOT_CONTAIN"
				},
				{
					"description": "The resource attribute value must start with the specified value.",
					"displayName": "starts with",
					"value": "STARTS_WITH"
				},
				{
					"description": "The resource attribute value must not start with the specified value.",
					"displayName": "does not start with",
					"value": "DOES_NOT_START_WITH"
				},
				{
					"description": "The resource attribute value must end with the specified value.",
					"displayName": "ends with",
					"value": "ENDS_WITH"
				},
				{
					"description": "The resource attribute value must not end with the specified value.",
					"displayName": "does not end with",
					"value": "DOES_NOT_END_WITH"
				},
				{
					"description": "The resource attribute must be defined (regardless of its value).",
					"displayName": "exists",
					"value": "EXISTS"
				},
				{
					"description": "The resource attribute must not be defined (regardless of its value).",
					"displayName": "does not exist",
					"value": "DOES_NOT_EXIST"
				}
			],
			"type": "enum"
		}
	},
	"maxObjects": 1000,
	"metadata": {
		"addItemButton": "Add new exception rule"
	},
	"multiObject": true,
	"ordered": true,
	"properties": {
		"attackHandling": {
			"description": "",
			"displayName": "Step 1: Define attack control for chosen criteria",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": {
				"$ref": "#/types/AttackHandling"
			}
		},
		"enabled": {
			"default": true,
			"description": "",
			"displayName": "Enabled",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "boolean"
		},
		"metadata": {
			"description": "",
			"displayName": "Step 4: Leave comment (optional)",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": {
				"$ref": "#/types/Metadata"
			}
		},
		"resourceAttributeConditions": {
			"description": "When you add multiple conditions, the rule applies if all conditions apply.\n\nIf you want the rule to apply only to a subset of your environment, provide the resource attributes that should be used to identify that part of the environment.",
			"displayName": "Step 3: Specify where the rule is applied (optional)",
			"documentation": "",
			"items": {
				"description": "",
				"displayName": "Condition",
				"documentation": "",
				"type": {
					"$ref": "#/types/ResourceAttributeCondition"
				}
			},
			"maxObjects": 100,
			"metadata": {
				"addItemButton": "Add new condition"
			},
			"minObjects": 0,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "list",
			"uiCustomization": {
				"table": {
					"columns": [
						{
							"builtinColumnRef": "summary",
							"displayName": "Condition"
						}
					]
				}
			}
		},
		"ruleName": {
			"constraints": [
				{
					"maxLength": 500,
					"minLength": 1,
					"type": "LENGTH"
				}
			],
			"description": "",
			"displayName": "Rule name",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": true,
			"type": "text"
		},
		"rules": {
			"description": "Provide conditions that must be met by the attack you want to allowlist.",
			"displayName": "Step 2: Define the rule",
			"documentation": "",
			"items": {
				"description": "",
				"displayName": "Condition",
				"documentation": "",
				"type": {
					"$ref": "#/types/AgentSideCriteria"
				}
			},
			"maxObjects": 100,
			"metadata": {
				"addItemButton": "Add new condition"
			},
			"minObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "list"
		}
	},
	"schemaGroups": [
		"group:appsec",
		"group:appsec.attack-protection"
	],
	"schemaId": "builtin:appsec.attack-protection-allowlist-config",
	"types": {
		"AgentSideCriteria": {
			"constraints": [
				{
					"customValidatorId": "criteriaValueValidator",
					"skipAsyncValidation": false,
					"type": "CUSTOM_VALIDATOR_REF"
				}
			],
			"description": "",
			"displayName": "AgentSideCriteria",
			"documentation": "",
			"properties": {
				"criteriaKey": {
					"default": "ENTRY_POINT_PAYLOAD",
					"description": "",
					"displayName": "Key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/AgentSideAttributeKey"
					}
				},
				"criteriaMatcher": {
					"datasource": {
						"filterProperties": [
							"criteriaKey"
						],
						"fullContext": false,
						"identifier": "criteriaMatcherDataSource",
						"resetValue": "NEVER",
						"useApiSearch": false,
						"validate": true
					},
					"default": "EQUALS",
					"description": "",
					"displayName": "Matcher",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"subType": "datasource",
					"type": {
						"$ref": "#/enums/AgentSideAttributeMatcher"
					}
				},
				"criteriaValueDetectionType": {
					"default": "SQL_INJECTION",
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"expectedValue": "DETECTION_TYPE",
						"property": "criteriaKey",
						"type": "EQUALS"
					},
					"type": {
						"$ref": "#/enums/DetectionType"
					}
				},
				"criteriaValueFreeText": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Value",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"precondition": {
							"expectedValue": "DETECTION_TYPE",
							"property": "criteriaKey",
							"type": "EQUALS"
						},
						"type": "NOT"
					},
					"type": "text"
				}
			},
			"summaryPattern": "{criteriaMatcher|enumValue, select, EXISTS {\"{criteriaKey}\" {criteriaMatcher}} DOES_NOT_EXIST {\"{criteriaKey}\" {criteriaMatcher}} other {\"{criteriaKey}\" {criteriaMatcher} {criteriaValueFreeText|valueSet, select, true {\"{criteriaValueFreeText}\"} other {\"{criteriaValueDetectionType}\"}}}}",
			"type": "object",
			"version": "0",
			"versionInfo": ""
		},
		"AttackHandling": {
			"description": "",
			"displayName": "Allowlisted attacks - Attack handling",
			"documentation": "",
			"properties": {
				"blockingStrategy": {
					"default": "OFF",
					"description": "Note: Monitoring has been designed to carry a production-ready performance footprint.\nThe overhead is depending on your application, but should be negligible in most cases.",
					"displayName": "Attack control",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/BlockingStrategy"
					}
				}
			},
			"summaryPattern": "",
			"type": "object",
			"version": "0",
			"versionInfo": ""
		},
		"Metadata": {
			"description": "",
			"displayName": "Allowlisted attacks - Comment",
			"documentation": "",
			"properties": {
				"comment": {
					"constraints": [
						{
							"maxLength": 5000,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "",
					"displayName": "Comment",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"subType": "multiline",
					"type": "text"
				}
			},
			"summaryPattern": "",
			"type": "object",
			"version": "0",
			"versionInfo": ""
		},
		"ResourceAttributeCondition": {
			"description": "",
			"displayName": "ResourceAttributeCondition",
			"documentation": "We provide suggestions for resource attribute keys and values based on what we currently see in your environment. You can also enter any value that isn't in the list. Key and value matches are case-sensitive. Resource attributes come out of the box from OneAgent, and you can set them up from [data enrichment](https://docs.dynatrace.com/docs/extend-dynatrace/extend-data).",
			"properties": {
				"matcher": {
					"default": "EQUALS",
					"description": "",
					"displayName": "Matcher",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"sortItems": "disabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": {
						"$ref": "#/enums/ResourceAttributeValueMatcher"
					}
				},
				"resourceAttributeKey": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"datasource": {
						"filterProperties": [],
						"fullContext": false,
						"identifier": "resourceAttributeKeyDataSource",
						"resetValue": "NEVER",
						"useApiSearch": false,
						"validate": false
					},
					"default": "",
					"description": "",
					"displayName": "Resource attribute key",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"autoSelectFirst": "disabled",
						"useCombobox": "enabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"subType": "datasource",
					"type": "text"
				},
				"resourceAttributeValue": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"datasource": {
						"filterProperties": [
							"resourceAttributeKey"
						],
						"fullContext": false,
						"identifier": "resourceAttributeValueDataSource",
						"resetValue": "NEVER",
						"useApiSearch": false,
						"validate": false
					},
					"description": "",
					"displayName": "Resource attribute value",
					"documentation": "",
					"maxObjects": 1,
					"metadata": {
						"autoSelectFirst": "disabled",
						"useCombobox": "enabled"
					},
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"precondition": {
						"precondition": {
							"expectedValues": [
								"EXISTS",
								"DOES_NOT_EXIST"
							],
							"property": "matcher",
							"type": "IN"
						},
						"type": "NOT"
					},
					"subType": "datasource",
					"type": "text"
				}
			},
			"summaryPattern": "{matcher|enumValue, select, EXISTS {\"{resourceAttributeKey}\" {matcher}} DOES_NOT_EXIST {\"{resourceAttributeKey}\" {matcher}} other {\"{resourceAttributeKey}\" {matcher} \"{resourceAttributeValue}\"}}",
			"type": "object",
			"version": "0",
			"versionInfo": ""
		}
	},
	"version": "2.0.3"
}