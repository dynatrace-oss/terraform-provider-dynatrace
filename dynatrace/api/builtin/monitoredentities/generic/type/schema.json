{
	"allowedScopes": [
		"environment"
	],
	"constraints": [
		{
			"customMessage": "All attributes of one type must adhere to the same pattern structure. This means that they have to be exactly the same, with the exception of the dimensions used. So e.g. 'my_{placeholder}' and 'my_{differentPlaceholder}' are fine together, but 'my_', '{placeholder}' or 'my_{placeholder}_' would not be.",
			"customValidatorId": "HomogeneousAttributePatterns",
			"skipAsyncValidation": false,
			"type": "CUSTOM_VALIDATOR_REF"
		}
	],
	"description": "Looking for topology extraction support? Find the [topology model](https://www.dynatrace.com/support/help/shortlink/topology-model#custom-topology-model \"Visit Dynatrace support center\") help page here.\n\n A generic type allows to define rules for creating custom monitored entities based on ingest data.",
	"displayName": "Generic types",
	"documentation": "",
	"dynatrace": "1",
	"enums": {
		"IngestDataSource": {
			"description": "Ingest datasource defines a data source type to evaluate for type creation.",
			"displayName": "Ingest datasource",
			"documentation": "",
			"items": [
				{
					"displayName": "Metrics",
					"value": "Metrics"
				},
				{
					"displayName": "Logs",
					"value": "Logs"
				},
				{
					"displayName": "Spans",
					"value": "Spans"
				},
				{
					"displayName": "Entities",
					"value": "Entities"
				},
				{
					"displayName": "Topology",
					"value": "Topology"
				},
				{
					"displayName": "Events",
					"value": "Events"
				},
				{
					"displayName": "Business Events",
					"value": "Business Events"
				}
			],
			"type": "enum"
		}
	},
	"maxObjects": 100,
	"metadata": {
		"addItemButton": "Add type definition",
		"itemDisplayName": "New type"
	},
	"multiObject": true,
	"ordered": true,
	"properties": {
		"createdBy": {
			"constraints": [
				{
					"type": "NOT_BLANK"
				},
				{
					"maxLength": 500,
					"minLength": 1,
					"type": "LENGTH"
				}
			],
			"default": "",
			"description": "The user or extension that created this type.",
			"displayName": "Created by",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "text"
		},
		"displayName": {
			"constraints": [
				{
					"type": "NOT_BLANK"
				},
				{
					"maxLength": 500,
					"minLength": 1,
					"type": "LENGTH"
				}
			],
			"default": "",
			"description": "The human readable type name for this entity type.",
			"displayName": "Type display name",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "text"
		},
		"enabled": {
			"default": true,
			"description": "Enables or disables the type",
			"displayName": "Enabled",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "ALWAYS",
			"nullable": false,
			"type": "boolean"
		},
		"name": {
			"constraints": [
				{
					"type": "NOT_BLANK"
				},
				{
					"maxLength": 250,
					"minLength": 1,
					"type": "LENGTH"
				},
				{
					"customMessage": "Type name must start with a letter and end with a letter or number.",
					"pattern": "^[A-Za-z].*[A-Za-z\\d]$",
					"type": "PATTERN"
				},
				{
					"customMessage": "Type name must be lower case only.",
					"pattern": "^[^A-Z]*$",
					"type": "PATTERN"
				},
				{
					"customMessage": "Type name must contain at least one colon (':').",
					"pattern": "^.*:.*$",
					"type": "PATTERN"
				},
				{
					"customMessage": "Type name must only contain valid special chars (':', '-', '_', ).",
					"pattern": "^[\\w:-]*$",
					"type": "PATTERN"
				},
				{
					"customMessage": "Type name must not be in use by a built in type.",
					"customValidatorId": "ValidTypeName",
					"skipAsyncValidation": false,
					"type": "CUSTOM_VALIDATOR_REF"
				}
			],
			"default": "",
			"description": "The entity type name. This type name must be unique and must not be changed after creation.",
			"displayName": "Type name",
			"documentation": "",
			"maxObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "text"
		},
		"rules": {
			"description": "Specify a list of rules which are evaluated in order. When **any** rule matches, the entity defined according to that rule will be extracted. Subsequent rules will not be evaluated.",
			"displayName": "List of rules",
			"documentation": "Rules are evaluated in the order they appear in this list. Each rule defines how to create a single entity from ingested data. It defines properties like name, identifier and other attributes which are stored as part of that entity. A rule also describes filters which need to match the ingest data in order to create an entity.\n\n#### Placeholders\n\nMany properties of an extraction rule use *placeholders* to dynamically evaluate and transform ingest data. Such rule properties are called *patterns* and allow combining dimension values with static text. The evaluated result is then used when extracting an entity. Each pattern may use multiple placeholders, each referring a single dimension key. During entity extraction, placeholders are replaced with the respective dimension values.\n\nPlaceholders start with `{` and end with `}` (Those characters cannot be part of the static text of a pattern). It is not allowed to nest placeholders.\n\n**Example:**\n\u003e Ingest data line: `temperature,room=5.30 gauge,min=17.1,max=17.3,sum=34.4,count=2`\n\u003e\n\u003e ID Pattern: `ROOM_{room}`\n\u003e\n\u003e Would evaluate to the ID `ROOM_5.30`.\n\n**Example:**\n\u003e Ingest data line: `device.packets.received,device_number=123,if=eth0 1024`\n\u003e\n\u003e Attribute Value Extraction Pattern: `192.168.1.{device_number}`\n\u003e\n\u003e Would evaluate to a string `192.168.1.123` and could be stored as an IP address.",
			"items": {
				"description": "Specify a rule defining the entity extraction.",
				"displayName": "Entity extraction rule",
				"documentation": "",
				"type": {
					"$ref": "#/types/ExtractionRule"
				}
			},
			"maxObjects": 10,
			"metadata": {
				"addItemButton": "Add extraction rule",
				"itemDisplayName": "New rule"
			},
			"minObjects": 1,
			"modificationPolicy": "DEFAULT",
			"nullable": false,
			"type": "list"
		}
	},
	"schemaGroups": [
		"group:topology-model"
	],
	"schemaId": "builtin:monitoredentities.generic.type",
	"types": {
		"AttributeEntry": {
			"description": "Describe how an attribute is extracted from ingest data.",
			"displayName": "Attribute entry",
			"documentation": "",
			"properties": {
				"displayName": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"description": "The human readable attribute name for this extraction rule. Leave blank to use the key as the display name.",
					"displayName": "Attribute display name",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"type": "text"
				},
				"key": {
					"constraints": [
						{
							"type": "NOT_BLANK"
						},
						{
							"maxLength": 20,
							"minLength": 3,
							"type": "LENGTH"
						},
						{
							"customValidatorId": "AttributeKeyValidator",
							"skipAsyncValidation": false,
							"type": "CUSTOM_VALIDATOR_REF"
						}
					],
					"default": "",
					"description": "The attribute key is the unique name of the attribute.",
					"displayName": "Attribute key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"pattern": {
					"constraints": [
						{
							"type": "NOT_BLANK"
						},
						{
							"customMessage": "The pattern must contain static text, placeholders or a combination of both.",
							"pattern": "^(?:\\{[^{}]+?\\}|[^{}])+$",
							"type": "PATTERN"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "Pattern for specifying the value for the extracted attribute. Can be a static value, placeholders or a combination of both.",
					"displayName": "Attribute value extraction pattern",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				}
			},
			"summaryPattern": "{key}: {pattern}",
			"type": "object",
			"version": "0.0.2",
			"versionInfo": ""
		},
		"DimensionFilter": {
			"description": "A dimension describes a property key which is present in the ingest data.",
			"displayName": "Ingest dimension filter",
			"documentation": "",
			"properties": {
				"key": {
					"constraints": [
						{
							"type": "NOT_BLANK"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "A dimension key which needs to exist in the ingest data to match this filter.",
					"displayName": "Dimension key",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"valuePattern": {
					"constraints": [
						{
							"customMessage": "The dimension value must either use '$eq', '$prefix' or '$exists' as predicates.",
							"pattern": "^\\s*(?:\\$eq|\\$prefix|\\$equals|\\$exists)[^A-Za-z0-9].*$",
							"type": "PATTERN"
						},
						{
							"customMessage": "No spaces are allowed except as part of values.",
							"pattern": "^(?:\\$eq\\(.+?\\)|\\$prefix\\(.+?\\)|\\$exists\\(\\))$",
							"type": "PATTERN"
						},
						{
							"customMessage": "A predicate must have a non-blank value. While $exists needs to have a blank value.",
							"pattern": "^\\s*(?:\\$eq\\s*?\\(.+?\\)|\\$prefix\\s*?\\(.+?\\)|\\$exists\\(\\))\\s*$",
							"type": "PATTERN"
						},
						{
							"customMessage": "The predicate needs to be followed by parenthesis.",
							"pattern": "^\\s*(\\$eq|\\$prefix|\\$exists)\\s*\\(.*\\)\\s*$",
							"type": "PATTERN"
						},
						{
							"customMessage": "Invalid dimension value. Currently only '$eq(\u003cvalue\u003e)' and '$prefix(\u003cvalue\u003e)' are allowed and you need to escape '(', ')' and '~' by prefixing them with '~'.",
							"customValidatorId": "ValidCondition",
							"skipAsyncValidation": false,
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"description": "A dimension value pattern which needs to exist in the ingest data to match this filter.",
					"displayName": "Dimension value pattern",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"type": "text"
				}
			},
			"summaryPattern": "{key}",
			"type": "object",
			"version": "1.0.2",
			"versionInfo": ""
		},
		"ExtractionRule": {
			"constraints": [
				{
					"customValidatorId": "ExistsHasDimension",
					"skipAsyncValidation": false,
					"type": "CUSTOM_VALIDATOR_REF"
				}
			],
			"description": "An extraction rule defines which sources are evaluated for extracting an entity. If a source matches the specified filters, an entity is extracted.",
			"displayName": "Entity extraction rule",
			"documentation": "",
			"properties": {
				"attributes": {
					"description": "All attribute extraction rules will be applied and found attributes will be added to the extracted type.",
					"displayName": "Attributes",
					"documentation": "",
					"items": {
						"description": "Describe how an attribute will be extracted from ingest data.",
						"displayName": "Attribute extraction rule",
						"documentation": "",
						"type": {
							"$ref": "#/types/AttributeEntry"
						}
					},
					"maxObjects": 100,
					"metadata": {
						"addItemButton": "Add attribute extraction rule",
						"itemDisplayName": "New attribute"
					},
					"minObjects": 0,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "set"
				},
				"iconPattern": {
					"constraints": [
						{
							"customMessage": "Icon name pattern must be valid and contain a barista icon id (or be combined with an optional placeholder).",
							"pattern": "^(?:[a-zA-Z0-9-]|\\{[^{}]+?\\})*$",
							"type": "PATTERN"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"description": "Define a pattern which is used to set the icon attribute of the entity. The extracted values must reference barista icon ids. You may define placeholders referencing data source dimensions.",
					"displayName": "Icon Pattern",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"type": "text"
				},
				"idPattern": {
					"constraints": [
						{
							"type": "NOT_BLANK"
						},
						{
							"customMessage": "ID pattern must be valid and contain at least one placeholder.",
							"pattern": "^[^{}]*\\{[^{}]+?\\}(?:\\{[^{}]+?\\}|[^{}])*$",
							"type": "PATTERN"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "",
					"description": "ID patterns are comprised of static text and placeholders referring to dimensions in the ingest data. An ID pattern **must** contain at least one placeholder to ensure that different entities will be created.",
					"displayName": "Extracted ID pattern",
					"documentation": "Take care that the pattern results in the same ID for the same entity. For example, using timestamp or counter-like dimensions as part of the ID would lead to the creation of new entities for each ingest data and is strongly discouraged!\n\nEach dimension key referred to by an identifier placeholder must be present in order to extract an entity. If any dimension key referred to in the identifier is missing, the rule will not be considered for evaluation. If you have cases where you still want to extract the same entity type but have differently named keys, consider creating multiple rules extracting the same entity type. In this case take care that each ID pattern evaluates to the same value if the same entity should be extracted.",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "text"
				},
				"instanceNamePattern": {
					"constraints": [
						{
							"customMessage": "Instance name pattern must be valid and contain at least one placeholder or be completely empty.",
							"pattern": "^$|^[^{}]*\\{[^{}]+?\\}(?:\\{[^{}]+?\\}|[^{}])*$",
							"type": "PATTERN"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"description": "Define a pattern which is used to set the name attribute of the entity. You may define placeholders referencing data source dimensions.",
					"displayName": "Instance name pattern",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"type": "text"
				},
				"requiredDimensions": {
					"description": "In addition to the dimensions already referred to in the ID pattern, you may specify additional dimensions which must be present in order to evaluate this rule.",
					"displayName": "Additionally required dimensions",
					"documentation": "",
					"items": {
						"description": "Specify the dimension which needs to be present in ingest data for the rule to evaluate.",
						"displayName": "Dimension filter",
						"documentation": "",
						"type": {
							"$ref": "#/types/DimensionFilter"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add dimension filter",
						"itemDisplayName": "New required dimension"
					},
					"minObjects": 0,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "set"
				},
				"role": {
					"constraints": [
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"description": "If you want to extract multiple entities of the same type from a single ingest line you need to define multiple rules with different roles.",
					"displayName": "Role",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": true,
					"type": "text"
				},
				"sources": {
					"description": "Specify all sources which should be evaluated for this rule. A rule is evaluated if any of the specified source filters match.",
					"displayName": "Source filters",
					"documentation": "",
					"items": {
						"description": "",
						"displayName": "Ingest source filter item",
						"documentation": "",
						"type": {
							"$ref": "#/types/SourceFilter"
						}
					},
					"maxObjects": 10,
					"metadata": {
						"addItemButton": "Add Source",
						"itemDisplayName": "New source filter"
					},
					"minObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"type": "set"
				}
			},
			"summaryPattern": "{idPattern}",
			"type": "object",
			"version": "1.0.2",
			"versionInfo": ""
		},
		"SourceFilter": {
			"description": "The source filter is matched against the source of the ingest data. This way a subset of a specified data source can be used for creating the type.",
			"displayName": "Ingest source filter",
			"documentation": "",
			"properties": {
				"condition": {
					"constraints": [
						{
							"type": "NOT_BLANK"
						},
						{
							"customMessage": "The condition must either use '$eq', '$prefix' or '$exists' as predicates.",
							"pattern": "^\\s*(?:\\$eq|\\$prefix|\\$exists)[^A-Za-z0-9].*$",
							"type": "PATTERN"
						},
						{
							"customMessage": "No spaces are allowed except as part of values.",
							"pattern": "^(?:\\$eq\\(.+?\\)|\\$prefix\\(.+?\\)|\\$exists\\(\\))$",
							"type": "PATTERN"
						},
						{
							"customMessage": "$eq and $prefix must have a non-blank value. While $exists needs to have a blank value.",
							"pattern": "^\\s*(?:\\$eq\\s*?\\(.+?\\)|\\$prefix\\s*?\\(.+?\\)|\\$exists\\s*?\\(\\))\\s*$",
							"type": "PATTERN"
						},
						{
							"customMessage": "The predicate needs to be followed by parenthesis.",
							"pattern": "^\\s*(\\$eq|\\$prefix|\\$exists)\\s*\\(.*\\)\\s*$",
							"type": "PATTERN"
						},
						{
							"customMessage": "Invalid condition. Currently only '$eq(\u003cvalue\u003e)', '$prefix(\u003cvalue\u003e)' and '$exists()' are allowed and you need to escape '(', ')' and '~' by prefixing them with '~'.",
							"customValidatorId": "ValidCondition",
							"skipAsyncValidation": false,
							"type": "CUSTOM_VALIDATOR_REF"
						},
						{
							"maxLength": 500,
							"minLength": 1,
							"type": "LENGTH"
						}
					],
					"default": "$eq()",
					"description": "Specify a filter that needs to match in order for the extraction to happen.",
					"displayName": "Condition",
					"documentation": "Three different filters are supported: `$eq(value)` will ensure that the source matches exactly 'value', `$prefix(value)` will ensure that the source begins with exactly 'value', '$exists()' will ensure that any source with matching dimension filter exists.\nIf your value contains the characters '(', ')' or '\\~', you need to escape them by adding a '\\~' in front of them.",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"precondition": {
						"precondition": {
							"expectedValues": [
								"Logs",
								"Spans",
								"Topology",
								"Business Events"
							],
							"property": "sourceType",
							"type": "IN"
						},
						"type": "NOT"
					},
					"type": "text"
				},
				"sourceType": {
					"datasource": {
						"filterProperties": [],
						"fullContext": false,
						"identifier": "topology-data-source-type",
						"resetValue": "NEVER",
						"useApiSearch": false,
						"validate": true
					},
					"default": "Metrics",
					"description": "Specify the source type of the filter to identify which data source should be evaluated for ingest.",
					"displayName": "Ingest datasource type",
					"documentation": "",
					"maxObjects": 1,
					"modificationPolicy": "DEFAULT",
					"nullable": false,
					"subType": "datasource",
					"type": {
						"$ref": "#/enums/IngestDataSource"
					}
				}
			},
			"summaryPattern": "{sourceType} source that matches {condition}",
			"type": "object",
			"version": "1.1",
			"versionInfo": ""
		}
	},
	"version": "1.1"
}